library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
source("~/Dropbox/Myfiles/GitHub/tvcure/R/levidence.R", echo=TRUE)
## Simulated data generation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
## TVcure model fitting
tau.0 = 2.5 ; lambda1.0 = c(285,15) ; lambda2.0 = c(25,1325) ## Optional
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,
tau.0=tau.0, lambda1.0=lambda1.0, lambda2.0=lambda2.0)
args(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
require(tvcure)
## Simulated data generation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
## TVcure model fitting
tau.0 = 2.7 ; lambda1.0 = c(40,15) ; lambda2.0 = c(25,70) ## Optional
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,
tau.0=tau.0, lambda1.0=lambda1.0, lambda2.0=lambda2.0)
print(model)
plot(model, pages=1)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
1 = c51:2)
1 == c(1:2)
is.null(c(1,2))
any(c(1,2)==2)
library(tvcure)
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
prdct = predict(model, df=subset(df.raw, df.raw$id==1))
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
obj = predict(model, df=subset(df.raw, df.raw$id==1))
model = tvcure(~z1+z2+s(x1)+s(x2),
~z3+z4+s(x3)+s(x4), df=df.raw)
obj = predict(model, df=subset(df.raw, df.raw$id==1))
obj
names(obj)
with(obj, matplot(Sp,type="l"))
with(obj, matplot(Sp,type="l",xlab="time",ylab=bquote(S[p](t))))
with(obj, plotRegion(Sp,type="l",xlab="time",ylab=bquote(S[p](t))))
args(plotRegion)
head(obj$Sp)
with(obj, matplot(Sp,type="l",lty=c(1,2,2),col=1,xlab="time",ylab=bquote(S[p](t))))
with(obj, matplot(Sp,type="l",ylim=c(0,1),lty=c(1,2,2),col=1,xlab="time",ylab=bquote(S[p](t))))
subset(df.raw, df.raw$id==1)
tail(subset(df.raw, df.raw$id==1),1)
args(tvcure)
args(predict.tvcure)
print(tail(obj$Sp))
print(tail(obj$Sp,n=1))
knit_with_parameters("~/Dropbox/Myfiles/GitHub/tvcure/README.Rmd")
knitr::opts_chunk$set(fig.path="man/figures")
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="man/figures/")
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
model = tvcure(~z1+z2+s(x1)+s(x2),
~z3+z4+s(x3)+s(x4), df=df.raw)
obj = predict(model, ci.level=0.95, df=df1)
df1 = subset(df.raw, df.raw$id==1) ## Data for unit 1
tail(df1, n=1) ## Data at the last observation time
obj = predict(model, ci.level=0.95, df=df1)
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="man/figures/")
## Package installation and loading
## install.packages("devtools")
## devtools::install_github("plambertULiege/tvcure")
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
model = tvcure(~z1+z2+s(x1)+s(x2),
~z3+z4+s(x3)+s(x4), df=df.raw)
print(model)
plot(model, select=0, pages=1)
plot(model, select=c(1,2), pages=1) ## First 2 additive terms in the model
plot(model, select=c(3,4), pages=1) ## Last 2 additive terms in the model
model = tvcure(~z1+z2+s(x1,ref=.75)+s(x2,ref=.5),
~z3+z4+s(x3,ref=.75)+s(x4,ref=.5), df=df.raw)
plot(model, select=1:4, pages=1) ## The 4 additive terms in the model
df1 = subset(df.raw, df.raw$id==1) ## Data for unit 1
tail(df1, n=1) ## Data at the last observation time
obj = predict(model, ci.level=0.95, df=df1)
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="man/figures/")
## Package installation and loading
## install.packages("devtools")
## devtools::install_github("plambertULiege/tvcure")
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
model = tvcure(~z1+z2+s(x1)+s(x2),
~z3+z4+s(x3)+s(x4), df=df.raw)
print(model)
plot(model, select=0, pages=1)
plot(model, select=c(1,2), pages=1) ## First 2 additive terms in the model
plot(model, select=c(3,4), pages=1) ## Last 2 additive terms in the model
model = tvcure(~z1+z2+s(x1,ref=.75)+s(x2,ref=.5),
~z3+z4+s(x3,ref=.75)+s(x4,ref=.5), df=df.raw)
plot(model, select=1:4, pages=1) ## The 4 additive terms in the model
df1 = subset(df.raw, df.raw$id==1) ## Data for unit 1
tail(df1, n=1) ## Data at the last observation time
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2),col=1,
xlab="time", ylab=bquote(S[p](t)))
print(tail(obj$Sp,n=1)) ## Cure probability
dim(obj$Hp)
obj$Hp[,c(1,3,2)]
head(obj$Hp[,c(1,3,2)]-
)
head(obj$Hp[,c(1,3,2)])
head(obj$Hp[,])
head(obj$Sp[,])
head(obj$Sp[,c(1,3,2)])
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="man/figures/")
## Package installation and loading
## install.packages("devtools")
## devtools::install_github("plambertULiege/tvcure")
library(tvcure)
## Data simulation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
round(head(df.raw),3)
model = tvcure(~z1+z2+s(x1)+s(x2),
~z3+z4+s(x3)+s(x4), df=df.raw)
print(model)
plot(model, select=0, pages=1)
plot(model, select=c(1,2), pages=1) ## First 2 additive terms in the model
plot(model, select=c(3,4), pages=1) ## Last 2 additive terms in the model
model = tvcure(~z1+z2+s(x1,ref=.75)+s(x2,ref=.5),
~z3+z4+s(x3,ref=.75)+s(x4,ref=.5), df=df.raw)
plot(model, select=1:4, pages=1) ## The 4 additive terms in the model
df1 = subset(df.raw, df.raw$id==1) ## Data for unit 1
tail(df1, n=1) ## Data at the last observation time
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2),col=1,
xlab="time", ylab=bquote(S[p](t)))
print(tail(obj$Sp,n=1)) ## Cure probability
print(tail(obj$Hp,n=1))
print(tail(obj$lHp,n=1))
print(tail(obj$lhp,n=1))
print(tail(obj$lHp,n=1))
names(obj)
print(tail(obj$llpcure,n=1))
print(tail(obj$pcure,n=1))
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path="man/figures/")
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2),col=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1), yaxp=c(0,1,10),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1), yaxp=c(0,1,10),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1), yaxp=c(0,1,10),
type="l", lty=c(1,2,2), col=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1,ny=0) ; abline(h=seq(0,1,by=.1),col"=grey",lwd=.5)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1,ny=0) ; abline(h=seq(0,1,by=.1,col"=grey",lwd=.5)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1,ny=0) ; abline(v=seq(0,1,by=.1),col"=grey",lwd=.5)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1,ny=0) ; abline(h=seq(0,1,by=.1),col="grey",lwd=.5)
obj = predict(model, ci.level=0.95, df=df1)
matplot(obj$Sp, ylim=c(0,1),
type="l", lty=c(1,2,2), col=1, las=1,
xlab="time", ylab=bquote(S[p](t)))
grid(lwd=.5,lty=1)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
sqrt(qchisq(.95,1))
p
sqrt(qchisq(.95,2))
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
library(tvcure)
log(19/13)
curve(dnorm(x,1.97,.82),-.5,5)
par(mar=c(4,4,1,1))
curve(dnorm(x,1.97,.82),-.5,5,ylab="f(x)")
1-pnorm(0,1.87,.82)
400/1780
416/2239
188/1358
qchisq(.95,2)
416/1823
188/1168
log((416/1823)/(188/1168))
