roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
earnings = seq(0.0,1.49,by=.01) ## Earnings of interest
## earnings = seq(.25,1.4,by=.05)
nvals = length(earnings)
##
df.new = data.frame(id=1:nvals, ## A separate <id> for each configuration
time=rep(1,nvals), ## Computation of cure prob of interest at t=1
EARNINGS=earnings, ## Earnings of interest
emp=factor(rep("Employed",nvals),levels=levels(df.raw$emp)) ## Employment status
)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
beta = c(beta0=NA, beta1=-.2, beta2=.15) ## beta0 will be tuned below to control cure rate
gam = c(gam1=.2, gam2=.2)
lambda.method = "LPS"
n = 250 ; beta[1]=.55 ; mu.cens = 260 ; RC.dist = "exponential"
seed = 123
temp = simulateData(n=n,
beta=beta, gam=gam,
mu.cens=mu.cens, RC.dist=RC.dist, Tmax=300, seed=seed)
dim(temp)
names(temp)
tem$df.summary
temp$df.summary
head(tem$df.summary)
head(temp$df.summary)
names(temp)
heda(temp$df.raw)
head(temp$df.raw)
?seed
?set.seed
dim(temp$df.raw)
dim(temp$df.summary)
head(temp$df.summary)
head(temp$df.summary, n=50)
names(temp)
temp$cure.rate
temp$RC.rate
dim(temp$df.raw)
names(temp$df.raw)
names(temp$df.summary)
temp$parameters
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
temp = simulateData(n=n,
beta=beta, gam=gam,
mu.cens=mu.cens, RC.dist=RC.dist, Tmax=300, seed=seed)
temp = simulateTVcureData(n=n,
beta=beta, gam=gam,
mu.cens=mu.cens, RC.dist=RC.dist, Tmax=300, seed=seed)
n
temp$parameters
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
fun = function(x) dweibull(x,2.65,100)
?deriv.formula
D(pweibull(x,2.65,100))
D(function(x) pweibull(x,2.65,100))
install.packages("Deriv")
library(Deriv)
Deriv(function(x) pweibull(x,2.65,100))
pweibull
pweibull(x,2.65,100)
pweibull(300,2.65,100)
f0F0 = list(f0=function(x) dweibull(x, 2.65, 100), F0=function(x) pweibull(x, 2.65, 100))
f0 = f0F0[[1]]
f0
f0F0 = list(f0=dweibull(x, 2.65, 100), F0=pweibull(x, 2.65, 100))
roxygen2::roxygenise()
library(tvcure)
temp = simulateTVcureData(n=n,
beta=beta, gam=gam,
mu.cens=mu.cens, RC.dist=RC.dist, Tmax=300, seed=seed)
temp$f0
temp$parameters$f0
temp$parameters$F0
names(temp$parameters)
library(tvcure)
temp = simulateTVcureData(n=n,
beta=beta, gam=gam,
mu.cens=mu.cens, RC.dist=RC.dist, Tmax=300, seed=seed)
temp$parameters$F0
names(temp$parameters)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
beta = c(beta0=.4, beta1=-.2, beta2=.15) ##  beta0 tunes the global cure rate
#' gam = c(gam1=.2, gam2=.2)
beta = c(beta0=.4, beta1=-.2, beta2=.15) ##  beta0 tunes the global cure rate
gam = c(gam1=.2, gam2=.2)
emp = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,RC.dist="exponential",mu.cens=550)
temp=emp
rm(emp)
names(temp)
head(temp$df.raw)
head(temp$df.raw,n=20)
head(temp$df.raw,n=50)
head(temp$df.raw)
head(temp$df.summary)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
args(dweibull)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
roxygen2::roxygenise()
library(tvcure)
temp = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,RC.dist="exponential",mu.cens=550)
temp$RC.rate
temp = simulateTVcureData(n=1500, seed=123, beta=beta, gam=gam,RC.dist="exponential",mu.cens=550)
temp$RC.rate
temp$cure.rate
temp = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,RC.dist="exponential",mu.cens=550)
temp$RC.rate
temp$cure.rate
data
datas
with(temp, c(cure.rate,RC.rate))
with(temp, c(cure.rate=cure.rate,RC.rate=RC.rate))
str(temp)
str(temp$df.raw)
str(temp$df.summary)
head(temp$df.summary)
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw, iter.verbose=TRUE)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw, iter.verbose=TRUE, lambda.method="LPS2")
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw, iter.verbose=TRUE, lambda.method="LPS2")
print(model)
beta
gam
plot(model)
plot(model,mfrow=c(1,2))
plot(model,mfrow=c(1,2))
plot(model,mfrow=c(1,2))
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw)
levidence(model)
roxygen2::roxygenise()
library(tvcure)
levidence(model)
roxygen2::roxygenise()
library(tvcure)
levidence(model)
levidence.tvcure(model)
typeof(model)
class(model)
roxygen2::roxygenise()
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw)
debu(tvcure)
debug(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS")
traceback()
options$error
options()
options(error=recover)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS")
C
Sigma
idx
Sigma[idx,idx]
max(sum(t(Sigma[idx,idx]) * Pd1.x),1)
sum(t(Sigma[idx,idx]) * Pd1.x)
sum(as.matrix(t(Sigma[idx,idx])) * Pd1.x)
Pd1.x
dim(t(Sigma[idx,idx]))
Sigma[idx,idx])
Sigma[idx,idx]
as.matrox(Sigma[idx,idx])
as.matrix(Sigma[idx,idx])
t(Sigma[idx,idx])
sum(as.matrix(t(as.matrix(Sigma[idx,idx])) * Pd1.x)
)
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS")
model2 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS2")
model
mdeol2
model2
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS")
model2 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS2")
model
model2
model3 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="Schall")
model3$fit$ED1
model2$fit$ED1
model$fit$ED1
library(tvcure)
library(tvcure)
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="LPS")
levidence(model,model2,model3)
str(model)
model$fit$lambda1
model2$fit$lambda1
model3$fit$lambda1
levidence(model,model2,model3)
plot(model)
BIC.tvcure(model,model2,model3)
AIC(model,model2,model3)
BIC(model,model2,model3)
AIC.tvcuremodel,model2,model3)
AIC.tvcure(model,model2,model3)
library(tvcure)
model3 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="Schall")
library(tvcure)
model3 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="Schall")
model3$fit$lambda1
model2$fit$lambda1
model1$fit$lambda1
model$fit$lambda1
model3$call
library(tvcure)
model4 = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw,lambda.method="nlminb")
levidence(model,model2,model3,model4)
model$fit$lambda1
model4$fit$lambda1
model2$fit$lambda1
BIC(model,model2,model3,model4)
BIC.tvcure(model,model2,model3,model4)
AIC.tvcure(model,model2,model3,model4)
names(model$fit)
with(model$fit, rowSums(t(solve(-Hes.regr)) * (-fit$Hes.regr0))
)
with(model$fit, rowSums(t(solve(-Hes.regr)) * (-fit$Hes.regr0)))
with(model$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0)))
sum(with(model$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0))))
levidence(model,model2,model3,model4)
sum(with(model$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0))))
sum(with(model2$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0))))
sum(with(model3$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0))))
sum(with(model4$fit, rowSums(t(solve(-Hes.regr)) * (-Hes.regr0))))
model4$fit$ED1
idx = 3 + 1:10 ; sum(with(model$fit, rowSums(t(solve(-Hes.regr)[idx,idx]) * (-Hes.regr0[idx,idx]))))
idx = 3 + 10 + 1:10 ; sum(with(model$fit, rowSums(t(solve(-Hes.regr)[idx,idx]) * (-Hes.regr0[idx,idx]))))
idx = 3 + 20 + 2 + 1:10 ; sum(with(model$fit, rowSums(t(solve(-Hes.regr)[idx,idx]) * (-Hes.regr0[idx,idx]))))
idx = 3 + 20 + 2 + 10 + 1:10 ; sum(with(model$fit, rowSums(t(solve(-Hes.regr)[idx,idx]) * (-Hes.regr0[idx,idx]))))
model4$fit$ED2
model$fit$ED2
model2$fit$ED2
roxygen2::roxygenise()
library(tvcure)
require(tvcure)
## Simulated data generation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
## TVcure model fitting
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw)
print(model)
plot(model)
plot(model, mfrow=c(1,2))
library(tvcure)
plot(model, mfrow=c(1,2))
library(tvcure)
model
library(tvcure)
model
library(tvcure)
model
library(tvcure)
model
model
library(tvcure)
additive(model)
additive.tvcure(model)
str(additive.tvcure(model))
names(additive.tvcure(model))
obj = additive.tvcure(model)
cat("Additive terms in long-term survival submodel:,obj$f1,\n")
cat("Additive terms in long-term survival submodel:",obj$f1,"\n")
cat("Additive terms in long-term survival submodel:\n") ; print(obj$f1)
AIC(fit)
AIC(model)
class(model)
AIC.tvcure(model)
AIC(model)
library(tvcure)
AIC(model)
levidence(tvcure)
levidence(model)
BIC(model)
obj = additive.tvcure(model)
names(obj)
names(obj$f1.grid)
names(obj$f1.grid$x1)
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat))
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat),xlab="x1",ylab="f(x1)")
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
pat(mfrow=c(1,2))
par(mfrow=c(1,2))
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
with(obj$f1.grid$x2, plotRegion(x=x,mat=y.mat,xlab="x2",ylab="f(x2)"))
par(mfrow=c(2,2))
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
with(obj$f1.grid$x2, plotRegion(x=x,mat=y.mat,xlab="x2",ylab="f(x2)"))
with(obj$f2.grid$x1, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
with(obj$f2.grid$x3, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
with(obj$f2.grid$x4, plotRegion(x=x,mat=y.mat,xlab="x2",ylab="f(x2)"))
par(mfrow=c(1,2))
with(obj$f1.grid$x1, plotRegion(x=x,mat=y.mat,xlab="x1",ylab="f(x1)"))
with(obj$f1.grid$x2, plotRegion(x=x,mat=y.mat,xlab="x2",ylab="f(x2)"))
names(df.raw)
range(df.raw$time)
summary(df.raw)
df.new = subset(df.raw,id==1)
df.new
dim(df.new)
df.new = subset(df.raw,id==1)[,-3]
head(df.new)
df.new = subset(df.raw,id==1 | id==2)[,-3]
dim(df.new)
subset(df.raw,id==2)
subset(df.raw,id==3)
df.new = subset(df.raw,id==1 | id==3)[,-3]
dim(df.new)
pred = predict(model,df.new)
args(predict)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
AIC(model)
library(tvcure)
AIC(model)
AIC(model)
library(tvcure)
BIC(model)
plot(model)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tvcure)
AIC
AIC.tvcure
q("no")
ls()
library(tvcure)
model
require(tvcure)
## Simulated data generation
beta = c(beta0=.4, beta1=-.2, beta2=.15) ; gam = c(gam1=.2, gam2=.2)
df.raw = simulateTVcureData(n=500, seed=123, beta=beta, gam=gam,
RC.dist="exponential",mu.cens=550)$df.raw
## TVcure model fitting
model = tvcure(~z1+z2+s(x1)+s(x2), ~z3+z4+s(x3)+s(x4), df=df.raw)
AIC(model)
AIC
BIC
BIC(model)
obj=predict(model)
obj=predict(model,df.new=df.raw)
names(obj)
with(subset(obj,id==1),pcure)
plotRegion(with(subset(obj,id==1),pcure))
plotRegion(mat=with(subset(obj,id==1),pcure))
plotRegion(1:300,mat=with(subset(obj,id==1),pcure))
plotRegion(1:275,mat=with(subset(obj,id==1),pcure))
plot(1:275,mat=with(subset(obj,id==1),pcure)[,1],type="l")
with(subset(obj,id==1),pcure)[,1]
plot(subset(obj,id==1),pcure)[,1]
subset(obj,id==1),pcure)
subset(obj,id==1)
head(subset(obj,id==1))
with(head(subset(obj,id==1)), plot(time,pcure.est,type="l"))
with(subset(obj,id==1), plot(time,pcure.est,type="l"))
names(subset(obj,id==1))
subset(obj,id==1)$pcure[,1]
plog(subset(obj,id==1)$pcure[,1])
plot(subset(obj,id==1)$pcure[,1])
plot(subset(obj,id==1)$Hp[,1])
library(tvcure)
library(tvcure)
BIC(model)
BIC
BIC.tvcure
library(tvcure)
AIC(model)
AIC.tvcure
mgcv::rig
?mgcv::rig
AIC
AIC(model)
AIC.tvcure
source("~/Myfiles/GitHub/tvcure/R/BIC.tvcure.R", echo=TRUE)
AIC
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
q("no")
